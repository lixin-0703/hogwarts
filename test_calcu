from pythoncode.calculator import Calculator
import pytest
def test_a():
    print("test a")
class TestCacl:
    def setup(self):
        #加上self变成了类的实例变量
        self.cacl = Calculator()
        print("计算开始")
    def teardown(self):
        print("计算结束")
    @pytest.mark.parametrize("a,b,expect",[[1,2,3],[100,100,200],[0.1,0.1,0.2]],ids=['intcase','bignum_case','float_case'])
    def test_add(self,a,b,expect):
        # cacl = Calculator()
        res = self.cacl.add(a,b)
        assert res==expect
    """
    课后作业
    1、补全计算器（加法 除法）的测试用例
    2、使用参数化完成测试用例的自动生成
    3、在调用测试方法之前打印【开始计算】，在调用测试方法之后打印【计算结束】
    注意：
    使用等价类，边界值，因果图等设计测试用例
    测试用例中添加断言，验证结果
    灵活使用 setup(), teardown() , setup_class(), teardown_class()
    
    """


    #减法
    @pytest.mark.parametrize("a,b,expect", [[3, 2, 1], [200, 100, 100], [0.2, 0.1, 0.1]],
                             ids=['intcase', 'bignum_case', 'float_case'])
    def test_sub(self, a, b, expect):
        # cacl = Calculator()
        res = self.cacl.sub(a, b)
        assert res == expect
    #乘法
    @pytest.mark.parametrize("a,b,expect", [[1, 2, 2], [100, 100, 10000], [0.1, 0.1, 0.01]],
                             ids=['intcase', 'bignum_case', 'float_case'])
    def test_mul(self, a, b, expect):
        # cacl = Calculator()
        res = self.cacl.mul(a, b)
        assert res == expect
    #除法
    @pytest.mark.parametrize("a,b,expect", [[3, 1, 3], [200, 100, 2], [0.2, 0.1, 2]],
                             ids=['intcase', 'bignum_case', 'float_case'])
    def test_div(self, a, b, expect):
        # cacl = Calculator()
        res = self.cacl.div(a, b)
        assert res == expect
